GM / GA / GE DR OM

This is my attempt to produce a working HAM radio logging software in Python.
This is the first working version and should be considered very very pre alpha.
It is free software, please download, test, send feedback and let me know if 
you feel you would like to contribute.


WHY?

I am an exclusive GNU/Linux user. This is largely inspired by a program called
Xlog <http://xlog.nongnu.org/>. It is a great and fast piece of software, it
is free, it uses a plain-text database, but it's GUI is not the single most 
perfect piece I have used. So I decided that because of this and largely for
learning purposes I would write something myself.


REQUIREMENTS AND PHILOSOPHY

I needed something simple for general ragchewing. I'm a beginning ham without
much experience and my requirements may change as I begin exploring digital
modes, CW, contesting etc.

I really aim for standard technologies, simple solutions and  not having to 
run any database servers and emulators. I needed to see who I am contacting,
what is the local time for the station, past qsos and perhaps some details
I can pull from the Internet.

Future plans include a separate application which could run full-screen on a 
secondary monitor and display the full callsign with a country, maybe a 
spot on the world map and possibly a photo or additional info for public
ham radio presentations.


HOW TO INSTALL AND RUN

If you have a working Python installation, just download the project and run
python hamlogger.py. The database file will be created and kept in the db
subfolder.


TECHNOLOGIES

- Python (2.7)
- SQLAlchemy
- Gtk3
- SQLite3


CURRENT FUNCTIONALITY

- recording basic QSO variables (call, rst, band, mode, name, qth, note) and
  editing, deleting qsos

- callsign notes (notes that are persistent for callsign entities (for example
  when you have qsos with callsign OE/OM1AWS, OM1AWS/p and OM1AWS, the program
  recognizes that these are all essentially one callsign and you can have a 
  note for this person that is visible across all variations of the callsign 
  and all qsos recorded. (to keep a person's phone number, email, address, ..)

- opendocument spreadsheet (ODS) import and export (partially implemented)

- export ADIF v.2 (only basic QSO details)

- export SOTA CSV file 


KEYBOARD SHORTCUTS

  CTRL-Z   Clear QSO fields and focus on the callsign box. 
           (failed QSO)

  CTRL-A   Increase QSO time by 1 minute
  CTRL-X   Decrease QSO time by 1 minute



GOALS (TODOS = THIS IS NOT DONE YET, THIS IS WHAT I WANT...EVENTUALLY :))

- fix design glitches

  - use actual sequence numbers instead of database ids for qso order
  - improve DXCC / ITU prefix lookup, especially USA

- gui
  
  - control all functionaity from the GUI
  - special listing of callsign entities with edit and export capability
  - improve the behavior of the callsign entity text note - set a fixed
  - number of lines
  - show local time for contacted stations

- configurable columns and variables:

  enable user to configure which columns get displayed in the GUI. Also, 
  introduce configurable variables where the variable name and format can be
  specified and optionally these can be displayed in the trees and edit 
  dialogs.

- session variables / tags:
  
  introduce a special class of qso variables: session variables to identify a 
  whole session, tag it and categorize it. then make these available for
  filtering qsos for exports. (for example: tag a bunch of qsos as "my trip
  to these SOTA-registered summits" and then export only these qsos, or
  tag all "qsos from the day I was at my country house using my experimental 
  antenna", was I working portable that day? Was I abroad working under CEPT
  conditions?)

- imports:

  - adif 
  - opendocument spreadsheet (ODS) - (partially implemented)

- exports:

  - opendocument spreadsheet (partially implemented)
  - csv
  - adif (v2, v3)

- connectors:

  - direct upload to eQSL.cc, LOTW and SOTA
  - automatic callsign querying at qrz.com, hamqth.com, hamcall.net

- database:
  
  - permit all standard SQLAlchemy engine strings in the config (allow use 
    of databases other than SQLite)

- i18n support
  - extract strings to an external file and enable translations

- standard python distribution and installation (distutils)


